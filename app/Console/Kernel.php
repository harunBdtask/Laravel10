<?php

namespace App\Console;

use Illuminate\Console\Scheduling\Schedule;
use Illuminate\Foundation\Console\Kernel as ConsoleKernel;
use Illuminate\Support\Carbon;
use SkylarkSoft\GoRMG\SystemSettings\Models\MailConfiguration;

class Kernel extends ConsoleKernel
{
    /**
     * The Artisan commands provided by your application.
     *
     * @var array
     */
    protected $commands = [

    ];

    /**
     * Define the application's command schedule.
     *
     * @param \Illuminate\Console\Scheduling\Schedule $schedule
     * @return void
     */
    protected function schedule(Schedule $schedule)
    {
        $schedule->command('delete:production-related-deleted-data')->daily();

        $schedule->command('insert:archived-sewing-output')->daily();
        $schedule->command('insert:archived-cutting-inventory-data')->daily();
        $schedule->command('insert:archived-print-inventory-data')->daily();
        $schedule->command('insert:archived-bundle-card-data')->daily();
        $schedule->command('insert:archived-bundle-card-previous-year-data')->daily();
        $schedule->command('insert:archived-cutting-inventory-previous-year-data')->daily();
        $schedule->command('insert:archived-print-inventory-previous-year-data')->daily();
        $schedule->command('insert:archived-print-inventory-challan-data')->daily();
        $schedule->command('insert:archived-cutting-inventory-challan-data')->daily();
        $schedule->command('insert:archived-bundlecard-generation-details-data')->daily();

        $schedule->command('delete:archived-sewingoutput-data-command')->daily();
        $schedule->command('delete:archived-cutting-inventory-data-command')->daily();
        $schedule->command('delete:archived-print-inventory-data-command')->daily();
        $schedule->command('delete:archived-bundlecard-data-command')->daily();
        $schedule->command('delete:archived-cutting-inventory-challan-data')->daily();
        $schedule->command('delete:archived-print-inventory-challan-data')->daily();
        $schedule->command('delete:archived-bundlecard-generation-details-data')->daily();
        $schedule->command('delete:old-bundle-card-generation-cache-data')->daily();
        $schedule->command('update-last-date:monthly-efficiency-summary-report')->daily();
        $schedule->command('update:po-pc-qty-in-purchase-order')->daily();
        $schedule->command('update:cutting-qty-in-total-production-report-last-month-data')->dailyAt('02:10');
        $schedule->command('db:backup')->dailyAt(config('backup.backup_time'));

        $scanUpdateTimes = ['08:00', '09:00', '10:00', '11:00', '12:00', '13:00', '15:00', '16:00', '17:00', '18:00', '02:00'];
        foreach ($scanUpdateTimes as $scanUpdateTime) {
            $schedule->command('update:print-rcv-input-scan-time-in-bundle-card')->dailyAt($scanUpdateTime);
            $schedule->command('update:print-send-scan-time-in-bundle-card')->dailyAt($scanUpdateTime);
            $schedule->command('delete:duplicate-bundles-from-cutting-inventories')->dailyAt($scanUpdateTime);
        }

        $this->autoGeneratedMail($schedule);

//        $schedule->command('queue:work --stop-when-empty');
    }

    /**
     * Register the commands for the application.
     *
     * @return void
     */
    protected function commands()
    {
        $this->load(__DIR__ . '/Commands');

        require base_path('routes/console.php');
    }

    private function autoGeneratedMail(Schedule $schedule)
    {
        $autoMailCommands = [
            'generate:daily-order-po-update',
            'generate:po-shipment-reminder',
            'generate:daily-cutting-update',
            'generate:daily-cutting-update-v2',
            'generate:daily-print_embr_update',
            'generate:daily-line-input-update',
            'generate:daily-sewing-update',
            'generate:daily-finishing-update',
            'generate:daily-finishing-update-v3',
            'generate:hourly-finishing-production-update',
            'generate:daily-finish-fabric-issue',
            'generate:daily-finish-fabric-receive',
            'generate:daily-sewing-input-update',
            'generate:daily-output-update',
            'generate:daily-yarn-received-update',
            'generate:daily-yarn-issue-update',
        ];
        $mailConfig = MailConfiguration::query()->first();
        if ($mailConfig && $mailConfig->sending_time) {
            $mailSendingStartFrom = $mailConfig->sending_time;
            $sendingTime = Carbon::parse($mailSendingStartFrom);
            $interval = 3;

            foreach ($autoMailCommands as $command) {
                $sendAt = $sendingTime->addMinutes($interval)->format('H:i');

                $schedule->command($command)->dailyAt($sendAt);
            }
        }
    }
}
